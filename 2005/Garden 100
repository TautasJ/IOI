/***
6 5
7 3
3 4
3 3
6 1
1 1
5 5
5 5
3 1
***/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
struct RMQ
{
	ll a, b;
	ll val = 100000;
	RMQ *left = NULL;
	RMQ *right = NULL;
	RMQ(ll a, ll b): a(a), b(b), val(val)
	{
		val = 100000;
		if (a < b)
		{
			left = new RMQ(a, (a + b) / 2);
			right = new RMQ((a + b) / 2 + 1, b);
		}
	}
	void change(ll i, ll v)
	{
		if (a == b && a == i)
		{
			val = min(v, val);
			return;
		}
		if (a <= i && i <= b)
		{
			left->change(i, v);
			right->change(i, v);
			val = min(left->val, right->val);
		}
	}
	ll get(ll l, ll r)
	{
		if (l <= a && b <= r)
			return val;
		if (r < a || b < l)
			return 100000;
		return min(left->get(l, r), right->get(l, r));
	}
};
struct KVAD
{
	ll i1, i2, j1, j2;
	KVAD(ll i1, ll i2, ll j1, ll j2): i1(i1), i2(i2), j1(j1), j2(j2) {}
	ll P()
	{
		return 2 * (i2 - i1 + 1) + 2 * (j2 - j1 + 1);
	};
};
struct Prefix
{
	int A[252][252];
	Prefix()
	{
		for (int i = 0; i < 252; i++)
			for (int j = 0; j < 252; j++)
				A[i][j] = 0;
	}
	void add(int x, int y)
	{
		A[x][y]++;
	}
	void calc()
	{
		for (int i = 0; i < 252; i++)
			for (int j = 0; j < 252; j++)
			{
				if (i - 1 >= 0)
					A[i][j] += A[i - 1][j];
				if (j - 1 >= 0)
					A[i][j] += A[i][j - 1];
				if (i - 1 >= 0 && j - 1 >= 0)
					A[i][j] -= A[i - 1][j - 1];
			}
	}
	int get(ll x1, ll x2, ll y1, ll y2)
	{
		return A[x2][y2] - A[x1 - 1][y2] - A[x2][y1 - 1] + A[x1 - 1][y1 - 1];
	}
};
int main()
{
	ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
	ll X, Y;
	cin >> X >> Y;
	ll n, k;
	cin >> n >> k;
	Prefix SUM;
	while (n--)
	{
		ll x, y;
		cin >> x >> y;
		SUM.add(x, y);
	}
	SUM.calc();
	vector<KVAD>visi;
	for (ll i1 = 1; i1 <= X; i1++)
	{
		for (ll i2 = i1; i2 <= X; i2++)
		{
			for (ll j1 = 1; j1 <= Y; j1++)
			{
				int lo = j1;
				int hi = Y;
				while (lo < hi)
				{
					int j2 = (lo + hi) / 2;
					int S = SUM.get(i1, i2, j1, j2);
					if (S > k)
					{
						hi = j2 - 1;
					}
					if (S < k)
					{
						lo = j2 + 1;
					}
					if (S == k)
					{
						hi = j2;
					}
				}
				int j2 = (lo + hi) / 2;
				{
					if (SUM.get(i1, i2, j1, j2) == k)
					{
						visi.push_back(KVAD(i1, i2, j1, j2));
					}
				}
			}
		}
	}
	ll ans = 100000;
	sort(visi.begin(), visi.end(), [](KVAD a, KVAD b) {return a.i2 < b.i2;});
	RMQ BestI(0, 300);
	for (KVAD a : visi)
	{
		BestI.change(a.i2, a.P());
		ans = min(ans, a.P() + BestI.get(0, a.i1 - 1));
	}
	sort(visi.begin(), visi.end(), [](KVAD a, KVAD b) {return a.j2 < b.j2;});
	RMQ BestJ(0, 300);
	for (KVAD a : visi)
	{
		BestJ.change(a.j2, a.P());
		ans = min(ans, a.P() + BestJ.get(0, a.j1 - 1));
	}
	if (ans < 100000)
		cout << ans;
	else
		cout << "NO";
}
