#include <bits/stdc++.h>
#include "grader.h"
using namespace std;
typedef long long ll;
int valid(int n, int inputSeq[])
{
	for (int i = 0; i < n; i++)
		inputSeq[i]--;
	int d = 0;
	for (int i = 0; i < n; i++)
		if (inputSeq[i] < n)
			d = (n + inputSeq[i] - i) % n;
	for (int i = 0; i < n; i++)
		if (inputSeq[i] < n)
			if ((n + inputSeq[i] - i) % n != d)
				return 0;
	unordered_set<int>X;
	for (int i = 0; i < n; i++)
		X.insert(inputSeq[i]);
	return X.size() == n;
}

//----------------------

int replacement(int n, int gondolaSeq[], int replacementSeq[])
{
	for (int i = 0; i < n; i++)
		gondolaSeq[i]--;
	int d = 0;
	for (int i = 0; i < n; i++)
		if (gondolaSeq[i] < n)
			d = (n + gondolaSeq[i] - i) % n;
	int l = 0;
	int k = n;
	vector<int>X;
	for (int i = 0; i < n; i++)
		if (gondolaSeq[i] >= n)
			X.push_back(i);
	sort(X.begin(), X.end(), [&](int a, int b) {return gondolaSeq[a] < gondolaSeq[b];});
	for (int i : X)
	{
		int h = (d + i) % n;
		while (h != gondolaSeq[i])
		{
			replacementSeq[l] = h + 1;
			h = k;
			l++;
			k++;
		}
	}
	return l;
}

//----------------------
ll Power(ll a, ll p)
{
	a = a % 1000000009;
	if (p == 0)
		return 1;
	if (p == 1)
		return a;
	if (p == 2)
		return (a * a) % 1000000009;
	return (Power(Power(a, p / 2), 2) * Power(a, p % 2)) % 1000000009;
}
int countReplacement(int n, int inputSeq[])
{
	if (valid(n, inputSeq) == 0)
		return 0;
	set<int>X;
	for (int i = 0; i < n; i++)
	{
		if (inputSeq[i] >= n)
			X.insert(inputSeq[i]);
	}
	ll ans = 1;
	if (X.size() == n)
		ans = (n) % 1000000009;
	ll k = n;
	while (!X.empty())
	{
		if (X.count(k))
		{
			X.erase(k);
			k++;
		}
		else
		{
			int b = *X.lower_bound(k);
			ans = (ans * Power(X.size(), b - k)) % 1000000009;
			k = b;
		}
	}
	return ans;
}/*
int main()
{
	int n = 14;
	int C[n] = {6, 94, 8, 9, 10, 93, 12, 13, 95, 1, 2, 3, 4, 5};
	cout << countReplacement(n, C) << endl << endl;
}*/
