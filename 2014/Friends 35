#include "grader.h"
#include <bits/stdc++.h>
using namespace std;
// Find out best sample
int brute(int n, int confidence[], int host[], int protocol[])
{
	set<int>friends[n];
	for (int i = 1; i < n; i++)
	{
		if (protocol[i] != 0)
		{
			for (int a : friends[host[i]])
			{
				friends[i].insert(a);
				friends[a].insert(i);
			}
		}
		if (protocol[i] != 1)
		{
			friends[host[i]].insert(i);
			friends[i].insert(host[i]);
		}
	}
	int ans = 0;
	for (int msk = 0; msk < (1 << n); msk++)
	{
		int gal = 0;
		bool ok = true;
		for (int i = 0; i < n; i++)
		{
			if ((msk & (1 << i)) > 0)
			{
				gal += confidence[i];
				for (int j = 0; j < n; j++)
					if ((msk & (1 << j)) > 0)
						if (friends[i].count(j))
							ok = false;
			}
		}
		if (ok)
			ans = max(ans, gal);
	}
	return ans;
}
int medis(int n, int confidence[], int host[])
{
	int dp[n][2];
	for (int i = n - 1; i >= 0; i--)
	{
		dp[i][0] = dp[i][1] = 0;
	}
	for (int i = n - 1; i >= 0; i--)
	{
		dp[i][1] += confidence[i];
		if (i != 0)
		{
			dp[host[i]][1] += dp[i][0];
			dp[host[i]][0] += max(dp[i][0], dp[i][1]);
		}
	}
	return max(dp[0][0], dp[0][1]);
}
int penkta(int n, int confidence[], int host[], int protocol[])
{
	int pridet = 0;
	int dp[n][2];
	for (int i = 0; i < n; i++)
		dp[i][0] = dp[i][1] = 0;
	int ret = 0;
	for (int i = n - 1; i >= 0; i--)
	{
		dp[i][1] += confidence[i];
		dp[i][1] = max(dp[i][1], dp[i][0]);
		ret = max(ret, dp[i][1]);
		ret = max(ret, dp[i][0]);
		if (i != 0)
		{
			if (protocol[i] == 0)
			{
				dp[host[i]][0] += dp[i][1];
				dp[host[i]][1] += dp[i][0];
			}
			if (protocol[i] == 1)
			{
				dp[host[i]][1] += dp[i][1];
			}
		}
	}
	return ret;
}
int findSample(int n, int confidence[], int host[], int protocol[])
{
	return penkta(n, confidence, host, protocol);
	if (n <= 16)
		return brute(n, confidence, host, protocol);
	bool sub2 = true;
	for (int i = 1; i < n; i++)
		sub2 &= (protocol[i] == 1);
	if (sub2)
		return accumulate(confidence, confidence + n, 0);
	bool sub3 = true;
	for (int i = 1; i < n; i++)
		sub3 &= (protocol[i] == 2);
	if (sub3)
		return *max_element(confidence, confidence + n);
	bool sub4 = true;
	for (int i = 1; i < n; i++)
		sub4 &= (protocol[i] == 0);
	if (sub4)
		return medis(n, confidence, host);
	bool sub5 = true;
	for (int i = 1; i < n; i++)
		sub5 &= (protocol[i] <= 1);
	if (sub5)
		return penkta(n, confidence, host, protocol);
	return penkta(n, confidence, host, protocol);
}
/*
int main()
{

}/**/
