/*input
5 5 2
1 0
1 2
3 2
1 3
4 2
2
3
1
*/
#include "grader.h"
#include <bits/stdc++.h>
typedef long long ll;
using namespace std;
const ll INF = 1000000009;
void count_routes(int N, int M, int P, int R[][2], int Q, int G[])
{
	srand(time(NULL));
	srand(rand()^N);
	srand(rand()^M);
	vector<int>adj[N];
	for (int i = 0; i < M; i++)
	{
		for (int t : {0, 1})
		{
			adj[R[i][t]].push_back(R[i][1 - t]);
			srand(rand()^R[i][t]);
		}
	}
	for (int i = 0; i < N; i++)
	{
		srand(rand()^adj[i].size());
		while (adj[i].size() > 2)
			adj[i].pop_back();
	}
	int DP[N][2][2];
	int buvau[N][2][2];
	for (int i = 0; i < N; i++)
	{
		for (int a : {0, 1})
		{
			for (int b : {0, 1})
			{
				DP[i][a][b] = INF;
				buvau[i][a][b] = 0;
			}
		}
	}
	DP[P][0][0] = 0;
	DP[P][1][1] = 0;
	buvau[P][0][0] = 1;
	buvau[P][1][1] = 1;
	function<int(int, int, int)> find = [&](int i, int a, int b)->int
	{
		if (buvau[i][a][b] != 0)
			return DP[i][a][b];
		buvau[i][a][b] = 1;
		if (adj[i].size() == 1)
		{
			int j = adj[i][0];
			return DP[i][a][b] = min(INF, ll(1 + find(j, (i == adj[j][0]), b)));
		}
		int j = adj[i][a];
		return DP[i][a][b] = min(INF, ll(1 + find(j, (i == adj[j][0]), b)));
	};
	for (int i = 0; i < N; i++)
	{
		for (int a : {0, 1})
		{
			for (int b : {0, 1})
			{
				find(i, a, b);
			}
		}
	}
	function<pair<int, int>(int)> find2 = [&](int a)->pair<int, int>
	{
		int i = P;
		int j;
		if (a == 1 && adj[i].size() >= 2)
			j = adj[i][1];
		else
			j = adj[i][0];
		pair<int, int>mini = {INF + 2, a};
		for (int b : {0, 1})
		{
			mini = min(mini, {1 + find(j, i == adj[j][0], b), b});
		}
		return mini;
	};
	pair<int, int>A[2];
	for (int x : {0, 1})
		A[x] = find2(x);
	map<ll, vector<ll>>ANS[2][2];
	ll C[2][2];
	C[0][0] = C[0][1] = C[1][0] = C[1][1] = 1;
	map<ll, ll>ATS;
	auto pridek = [&](ll x, ll b)->void
	{
		ll y = 0;
		int d = b;
		for (ll c : {0, 1})
		{
			ll a = A[b].second;
			y += ll(A[b].first);
			b = a;
		}
		//for (int t = 0; t < 1002; t++)
		//	ATS[x + y * t]++;
		if ((x < INF) && (y < INF))
		{
			ANS[b][d][x % y].push_back(x);
			C[b][d] = y;
		}
	};
	if (true)
	{
		for (int i = 0; i < N; i++)
		{
			pair<int, int>X = {INF + 1, -1};
			for (int b : {0, 1})
				X = min(X, {find(i, 0, b), b});
			int b = X.second;
			if (b == -1)
				continue;
			ll x = find(i, 0, b);
			if (x >= INF)
				continue;
			ll t = 10;
			while (t--)
			{
				if (x < INF)
				{
					ATS[x]++;
				}
				ll a = A[b].second;
				if (x < INF)
					x += ll(A[b].first);
				b = a;
			}
			if (x < INF)
			{
				pridek(x, b);
				ll a = A[b].second;
				x += ll(A[b].first);
				b = a;
				if (x < INF)
					pridek(x, b);
			}
		}
	}
	for (int a : {0, 1})
		for (int b : {0, 1})
		{
			for (pair<const ll, vector<ll>>&y : ANS[a][b])
			{
				sort(y.second.begin(), y.second.end());
			}
		}
	for (int i = 0; i < Q; i++)
	{
		int ans = 0;
		for (int a : {0, 1})
		{
			for (int b : {0, 1})
			{
				if (ANS[a][b].count(G[i] % C[a][b]))
				{
					vector<ll>&x = ANS[a][b][G[i] % C[a][b]];
					ans += upper_bound(x.begin(),
					                   x.end(),
					                   G[i])
					       - x.begin();
				}
			}
		}
		ans += ATS[G[i]];
		answer(ans);
	}
}
/*
int main()
{
	int N, M, P;
	cin >> N >> M >> P;
	int R[M][2];
	for (int i = 0; i < M; i++)
		cin >> R[i][0] >> R[i][1];
	int Q;
	cin >> Q;
	int G[Q];
	for (int &i : G)
		cin >> i;
	count_routes(N, M, P, R, Q, G);
}/**/
