/*input
1000 1 1000
2 3 4 4 4 7 7 8 10 12 12 13 14 15 16 16 17 17 18 21 22 23 24 24 25 28 30 30 30 30 32 32 34 34 34 34 35 35 35 35 35 36 36 36 37 39 41 42 42 43 43 44 44 44 45 46 46 46 47 48 49 51 52 53 55 56 58 60 61 61 62 63 64 68 69 70 72 74 75 76 76 76 78 78 80 81 83 83 84 84 85 85 86 86 88 88 90 92 92 94 95 98 98 98 98 102 103 103 107 108 113 114 118 118 121 123 123 124 125 127 129 131 132 132 133 134 135 135 135 136 137 138 139 140 140 140 143 144 146 147 147 148 150 151 151 152 153 155 156 157 157 158 159 160 163 163 164 165 171 172 173 173 175 175 175 175 178 180 180 181 182 183 184 184 184 186 192 192 192 193 196 197 200 201 202 203 205 206 207 210 212 212 213 214 214 216 217 219 219 219 219 220 221 223 223 224 224 226 226 226 227 227 228 228 229 229 229 230 230 231 232 232 234 235 236 237 237 238 238 240 243 244 246 246 246 248 248 248 249 249 249 249 251 253 253 254 255 257 257 258 260 260 261 261 263 264 264 265 265 266 266 268 269 269 270 270 271 271 271 272 272 274 274 277 279 281 281 282 285 285 286 287 288 288 290 290 291 292 293 293 296 296 296 296 297 298 299 299 301 305 306 307 309 309 309 310 311 312 313 313 313 314 315 316 316 318 319 320 321 321 322 323 325 325 326 328 328 328 329 330 331 332 332 333 333 337 338 338 339 343 343 344 344 344 346 349 349 350 351 351 353 353 354 354 354 355 356 356 357 357 358 358 359 360 360 361 361 365 366 367 368 370 371 372 373 374 377 377 379 380 380 382 382 382 383 383 386 387 387 387 391 392 393 394 395 396 396 397 397 398 398 398 399 400 400 402 402 404 412 412 413 414 414 415 418 421 422 422 425 426 427 427 428 428 429 430 434 434 434 435 436 437 437 440 440 441 442 443 444 447 448 449 449 451 454 454 455 457 458 458 458 459 460 461 463 464 465 466 466 467 469 470 471 471 473 474 477 477 477 478 481 482 482 482 483 484 485 485 486 486 487 487 489 491 491 492 493 494 495 496 498 498 499 500 501 501 502 503 504 504 505 507 507 508 509 509 511 512 512 512 512 513 514 517 517 518 520 521 523 523 523 525 526 527 529 529 529 530 530 531 531 531 532 533 533 533 534 534 535 537 537 537 538 538 538 539 539 540 540 541 544 546 546 546 547 547 548 548 548 549 549 550 550 550 551 551 552 553 553 554 555 556 557 558 558 562 562 562 564 564 566 566 567 567 570 570 573 575 577 580 580 582 583 585 586 587 587 589 589 589 590 591 591 593 593 594 594 595 595 595 597 597 599 600 600 601 603 603 603 604 605 605 607 608 608 609 610 610 611 612 613 613 615 618 619 619 620 620 623 623 624 624 628 628 629 631 631 632 634 636 637 640 642 647 649 652 653 653 655 655 655 656 658 658 659 659 660 661 662 665 666 666 667 667 668 670 671 671 671 674 676 677 677 678 679 680 680 682 685 685 686 688 689 690 694 694 696 698 700 701 701 702 702 702 704 707 708 708 709 710 711 712 712 713 713 713 713 716 716 716 717 718 719 721 721 721 722 722 725 726 727 729 729 730 731 731 731 732 733 733 735 736 738 739 742 742 742 744 746 746 747 747 749 749 752 752 753 753 753 754 757 758 759 759 761 761 762 763 763 765 765 766 766 767 768 768 769 769 769 769 770 771 771 771 771 771 772 774 774 774 774 776 780 781 782 784 785 785 786 786 787 788 789 793 794 795 795 797 798 799 800 800 802 802 805 806 808 808 808 810 810 813 814 815 815 818 820 820 821 822 824 826 826 827 827 827 828 828 828 829 831 832 833 834 836 836 836 837 837 838 839 840 844 845 845 845 845 846 848 849 850 851 853 854 854 855 860 862 863 865 865 866 867 867 868 868 869 870 870 871 871 871 872 873 875 875 875 879 880 880 881 882 883 884 886 887 887 888 888 888 890 890 892 892 894 895 895 895 896 896 896 896 897 898 899 899 901 901 902 902 904 906 906 908 908 910 910 912 912 913 915 919 924 926 929 930 930 930 930 935 937 944 945 946 946 946 947 948 948 948 948 948 949 951 951 952 953 954 954 954 956 957 958 958 961 961 962 962 963 965 966 966 968 968 968 968 970 971 972 974 974 974 975 976 981 982 983 985 986 987 987 988 989 990 991 992 993 997 998 999

*/
#include "boxes.h"
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll ceil(ll a, ll b)
{
	if (a % b == 0)
		return a / b;
	return a / b + 1;
}
ll delivery(int N, int K, int L, int p[])
{
	clock_t begin = clock();
	vector<ll>a;
	vector<ll>b;
	ll c = 0;
	for (int i = 0; i < N; i++)
	{
		if (L % 2 == 0 && p[i] == L / 2)
			c++;
		else if (L - p[i] < p[i])
			a.push_back(L - p[i]);
		else
			b.push_back(p[i]);
	}
	sort(a.begin(), a.end());
	sort(b.begin(), b.end());
	ll dpa[a.size() + 1];
	dpa[0] = 0;
	for (int i = 1; i <= a.size(); i++)
	{
		if (i <= K)
			dpa[i] = a[i - 1];
		else
			dpa[i] = dpa[i - K] + a[i - 1];
	}
	ll dpb[b.size() + 1];
	dpb[0] = 0;
	for (int i = 1; i <= b.size(); i++)
	{
		if (i <= K)
			dpb[i] = b[i - 1];
		else
			dpb[i] = dpb[i - K] + b[i - 1];
	}
	ll ret = ll(L) * ceil(N, K);
	int ka = a.size();
	int kb = b.size();
	ll suma = 0;
	for (int kiek = 0; kiek < N; kiek += K)
	{
		int liko = N - kiek;
		if (suma >= ret)
			break;
		clock_t end = clock();
		if (double(end - begin) / CLOCKS_PER_SEC >= 2.8)
			break;
		for (int i = max(liko - kb, 0); i <= min(liko, ka); i++)
		{
			ret = min(ret, (dpa[i] + dpb[liko - i]) * 2 + suma);
		}
		suma += L;
	}
	return ret;
}/*
int main()
{
	int A[] = {10, 47, 60};
	cout << delivery(3, 2, 100, A) << endl;//120
	int B[] = {1, 2, 5};
	cout << delivery(3, 2, 8, B) << endl; //10
	int N, K, L;
	while (cin >> N >> K >> L)
	{
		int C[N];
		for (int i = 0; i < N; i++)
			cin >> C[i];
		cout << delivery(N, K, L, C) << "\n";
	}
}/**/
