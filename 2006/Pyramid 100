/*input
8 5 5 3 2 1
1 5 10 3 7 1 2 5
6 12 4 4 3 3 1 5
2 4 3 1 6 6 19 8
1 1 1 3 4 2 4 5
6 6 3 3 3 2 2 2
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
int A[1000 + 1][1000 + 1];
int S[1000 + 1][1000 + 1];
pair<int, pair<int, int>>M1[1010][1010];
pair<int, pair<int, int>>M2[1010][1010];
int main()
{
	ios_base::sync_with_stdio(false);
	int m, n, a, b, c, d;
	cin >> m >> n >> a >> b >> c >> d;
	int dx = b - d - 2;
	int dy = a - c - 2;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			cin >> A[i][j];
			A[i][j] += A[i - 1][j];
			A[i][j] += A[i][j - 1];
			A[i][j] -= A[i - 1][j - 1];
		}
	}
	for (int x = 1; x + d - 1 <= n; x++)
	{
		for (int y = 1; y + c - 1 <= m; y++)
		{
			S[x][y] += A[x + d - 1][y + c - 1];
			S[x][y] -= A[x + d - 1][y - 1];
			S[x][y] -= A[x - 1][y + c - 1];
			S[x][y] += A[x - 1][y - 1];
		}
	}
	for (int y = 1; y <= m; y++)
	{
		vector<int>Q;
		int i = 0;
		for (int x = n; x >= 1; x--)
		{
			while (!Q.empty() && S[Q.back()][y] >= S[x][y])
				Q.pop_back();
			Q.push_back(x);
			while (Q[i] > x + dx)
				i++;
			i = min(i, (int)Q.size() - 1);
			M1[x][y] = {S[Q[i]][y], {y, Q[i]}};
		}
	}
	for (int x = 1; x <= n; x++)
	{
		vector<int>Q;
		int i = 0;
		for (int y = m; y >= 1; y--)
		{
			while (!Q.empty() && M1[x][Q.back()] >= M1[x][y])
				Q.pop_back();
			Q.push_back(y);
			while (Q[i] > y + dy)
				i++;
			i = min(i, (int)Q.size() - 1);
			M2[x][y] = M1[x][Q[i]];
		}
	}

	pair<int, pair<pair<int, int>, pair<int, int>>>MX = { -1000, {{ -1, -1}, { -1, -1}}};
	for (int i = 1; i + b - 1 <= n; i++)
	{
		for (int j = 1; j + a - 1 <= m; j++)
		{
			int suma = 0;
			suma += A[i + b - 1][j + a - 1];
			suma -= A[i + b - 1][j - 1];
			suma -= A[i - 1][j + a - 1];
			suma += A[i - 1][j - 1];
			pair<int, pair<int, int>> mn = M2[i + 1][j + 1];
			MX = max(MX, {suma - mn.first, {{j, i}, mn.second}});
		}
	}
	cout << MX.second.first.first << " " << MX.second.first.second << "\n" <<
	     MX.second.second.first << " " << MX.second.second.second << "\n";
}
