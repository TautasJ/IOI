/*input
16
MMBMBBBBMMMMMBMB
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
int f(int a, int b, int c)
{
	if (a == 3)
	{
		if (b == 3)
			return 1;
		return 1 + (b != c);
	}
	if (a == b && b == c)
		return 1;
	if (a != b && b != c && a != c)
		return 3;
	return 2;
}
int main()
{
	ios_base::sync_with_stdio(false);
	int n;
	cin >> n;
	string s;
	cin >> s;
	int DP[3][4][4][4][4];
	for (int i : {0, 1, 2, 3})
		for (int j : {0, 1, 2, 3})
			for (int k : {0, 1, 2, 3})
				for (int l : {0, 1, 2, 3})
					DP[0][i][j][k][l] = -100000000;
	DP[0][3][3][3][3] = 0;
	for (int i = 1; i <= n; i++)
	{
		for (int a : {0, 1, 2, 3})
			for (int b : {0, 1, 2, 3})
				for (int c : {0, 1, 2, 3})
					for (int d : {0, 1, 2, 3})
						DP[i % 3][a][b][c][d] = -100000000;
		int t;
		if (s[i - 1] == 'M')
			t = 0;
		if (s[i - 1] == 'B')
			t = 1;
		if (s[i - 1] == 'F')
			t = 2;
		for (int a : {0, 1, 2, 3})
			for (int b : {0, 1, 2, 3})
				for (int c : {0, 1, 2, 3})
					for (int d : {0, 1, 2, 3})
					{
						DP[i % 3][b][t][c][d] = max(DP[i % 3][b][t][c][d], DP[(i - 1) % 3][a][b][c][d] + f(a, b, t));
						DP[i % 3][a][b][d][t] = max(DP[i % 3][a][b][d][t], DP[(i - 1) % 3][a][b][c][d] + f(c, d, t));
					}
	}
	int ans = 0;
	for (int i : {0, 1, 2, 3})
		for (int j : {0, 1, 2, 3})
			for (int k : {0, 1, 2, 3})
				for (int l : {0, 1, 2, 3})
					ans = max(ans, DP[n % 3][i][j][k][l]);
	cout << ans << "\n";
}
